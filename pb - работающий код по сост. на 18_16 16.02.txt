import logging
import asyncio
import requests
import math
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7446071433:AAF9DsFTKjQu7wuMj8iwKaDIK-Y5a89mQhk'

# ID –õ–µ–Ω—ã
LENA_CHAT_ID = '1326402096'

# API-–∫–ª—é—á –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ TomTom
api_key = 'ZZoqfG4otwIX0Gg1npdoIGSo7JIaEaPC'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ (–†–æ–º–∞–Ω–æ–≤–∞ 28)
DESTINATION = (55.034281, 82.917169)

# –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
CHECKPOINTS = {
    "–ì–ü–ù–¢–ë": (55.016395, 82.945483),
    "–û–ø–µ—Ä–Ω—ã–π —Ç–µ–∞—Ç—Ä": (55.030087, 82.920644),
    "—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è": (55.031483, 82.916098),
    "–ü–æ–¥—ä–µ—Ö–∞–ª": (55.034479, 82.916807)
}

# –†–∞–¥–∏—É—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ (–≤ –º–µ—Ç—Ä–∞—Ö)
RADIUS = 100

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ä—Ç")],
        [KeyboardButton(text="üöô –ú–∞—à–∏–Ω–∫–∞", request_location=True)],
        [KeyboardButton(text="üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–≤ –º–µ—Ç—Ä–∞—Ö)
def haversine(coord1, coord2):
    from math import radians, cos, sin, asin, sqrt

    lat1, lon1 = coord1
    lat2, lon2 = coord2

    R = 6371000  # —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)

    a = sin(dlat / 2) ** 2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2) ** 2
    c = 2 * asin(sqrt(a))

    return R * c

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∫ API TomTom –∏ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def get_route_duration(origin, destination):
    coordinates_str = f"{origin[0]},{origin[1]}:{destination[0]},{destination[1]}"
    url = f"https://api.tomtom.com/routing/1/calculateRoute/{coordinates_str}/json?key={api_key}"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        route = data.get('routes', [])[0]
        length = route['summary']['lengthInMeters'] / 1000
        travel_time = math.ceil(route['summary']['travelTimeInSeconds'] / 60)
        return length, travel_time
    return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö
async def check_and_notify(current_location):
    for name, checkpoint in CHECKPOINTS.items():
        distance = haversine(current_location, checkpoint)
        if distance <= RADIUS:
            _, travel_time = get_route_duration(current_location, DESTINATION)
            arrival_time = (datetime.now() + timedelta(minutes=travel_time)).strftime('%H:%M')
            await bot.send_message(LENA_CHAT_ID, f"–î–∏–º–∞ –ø—Ä–æ–µ—Ö–∞–ª {name}, –±—É–¥–µ—Ç —É —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {travel_time} –º–∏–Ω—É—Ç –≤ {arrival_time}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üöô –ú–∞—à–∏–Ω–∫–∞"
@dp.message(lambda message: message.location)
async def handle_location(message: types.Message):
    user_location = (message.location.latitude, message.location.longitude)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏ –≤—Ä–µ–º—è
    length, travel_time = get_route_duration(user_location, DESTINATION)

    if length and travel_time:
        arrival_time = (datetime.now() + timedelta(minutes=travel_time)).strftime('%H:%M')

        await message.answer(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –†–æ–º–∞–Ω–æ–≤–∞ 28: {length:.2f} –∫–º\n–í—Ä–µ–º—è –≤ –ø—É—Ç–∏: {travel_time} –º–∏–Ω—É—Ç")

        await bot.send_location(LENA_CHAT_ID, latitude=user_location[0], longitude=user_location[1])
        await bot.send_message(
            LENA_CHAT_ID,
            f"–ó–∞ —Ç–æ–±–æ–π –≤—ã–µ—Ö–∞–ª –º—É–∂, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ –¥–æ —Ç–µ–±—è {length:.2f} –∫–º\n"
            f"–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ {travel_time} –º–∏–Ω—É—Ç\n"
            f"–ë—É–¥–µ—Ç —É —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {arrival_time}"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        while True:
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
            await check_and_notify(user_location)

    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã"
@dp.message(lambda message: message.text == "üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã")
async def send_work_message(message: types.Message):
    await bot.send_message(LENA_CHAT_ID, "–ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã, –≤—ã–µ–∑–∂–∞—é —á—É—Ç—å –ø–æ–∑–∂–µ üò´")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ, —á—Ç–æ —Ç—ã –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—à—å—Å—è, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
