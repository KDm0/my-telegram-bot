import logging
import asyncio
import requests
import math
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –õ–µ–Ω—ã
TOKEN = '7446071433:AAF9DsFTKjQu7wuMj8iwKaDIK-Y5a89mQhk'
LENA_CHAT_ID = '1326402096'

# API –∫–ª—é—á –¥–ª—è TomTom
API_KEY = 'ZZoqfG4otwIX0Gg1npdoIGSo7JIaEaPC'

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É–Ω–∫—Ç–∞ –ë (–†–æ–º–∞–Ω–æ–≤–∞ 28)
DESTINATION = (55.034281, 82.917169)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
        [KeyboardButton(text="üöô –ú–∞—à–∏–Ω–∫–∞")],
        [KeyboardButton(text="üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
def calculate_route(start_lat, start_lon):
    url = f"https://api.tomtom.com/routing/1/calculateRoute/{start_lat},{start_lon}:{DESTINATION[0]},{DESTINATION[1]}/json?key={API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        route = data.get('routes', [])[0]
        length = route['summary']['lengthInMeters'] / 1000
        travel_time = math.ceil(route['summary']['travelTimeInSeconds'] / 60)
        return length, travel_time
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
        return None, None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@dp.message(lambda message: message.location is not None)
async def handle_location(message: types.Message):
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
    length, travel_time = calculate_route(user_lat, user_lon)

    if length and travel_time:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
        arrival_time = (datetime.now() + timedelta(minutes=travel_time)).strftime("%H:%M")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = (f"–ó–∞ —Ç–æ–±–æ–π –≤—ã–µ—Ö–∞–ª –º—É–∂, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ –¥–æ —Ç–µ–±—è {length:.2f} –∫–º\n"
               f"–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ {travel_time} –º–∏–Ω—É—Ç\n"
               f"–ë—É–¥–µ—Ç —É —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {arrival_time}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ
        await bot.send_location(LENA_CHAT_ID, user_lat, user_lon)
        await bot.send_message(LENA_CHAT_ID, msg)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –º–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!", reply_markup=keyboard)

        # –î–µ–ª–∏–º—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ 1 —á–∞—Å
        await bot.send_location(LENA_CHAT_ID, user_lat, user_lon, live_period=3600)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üöô –ú–∞—à–∏–Ω–∫–∞"
@dp.message(lambda message: message.text == "üöô –ú–∞—à–∏–Ω–∫–∞")
async def send_car_message(message: types.Message):
    await bot.send_message(LENA_CHAT_ID, "–Ø –ø–æ–µ—Ö–∞–ª üöó")
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã"
@dp.message(lambda message: message.text == "üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã")
async def send_work_message(message: types.Message):
    await bot.send_message(LENA_CHAT_ID, "–ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã, –≤—ã–µ–∑–∂–∞—é —á—É—Ç—å –ø–æ–∑–∂–µ üò´")
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
