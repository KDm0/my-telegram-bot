import logging
import asyncio
import requests
import math
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaGeo
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –õ–µ–Ω—ã
TOKEN = '7446071433:AAF9DsFTKjQu7wuMj8iwKaDIK-Y5a89mQhk'
LENA_CHAT_ID = '1326402096'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# API –∫–ª—é—á TomTom
api_key = 'ZZoqfG4otwIX0Gg1npdoIGSo7JIaEaPC'

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
checkpoint_names = ["–ì–ü–ù–¢–ë", "–û–ø–µ—Ä–Ω—ã–π", "—É–ª. –°–æ–≤–µ—Ç—Å–∫—É—é", "–ü–æ–¥—ä–µ—Ö–∞–ª"]
checkpoints = [
    (55.016395, 82.945483),  # –ì–ü–ù–¢–ë
    (55.030087, 82.920644),  # –û–ø–µ—Ä–Ω—ã–π
    (55.031483, 82.916098),  # –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ –°–æ–≤–µ—Ç—Å–∫—É—é
    (55.034479, 82.916807)   # –ü–æ–¥—ä–µ—Ö–∞–ª
]

# –¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
destination = (55.034281, 82.917169)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ä—Ç")],
        [KeyboardButton(text="üöô –ú–∞—à–∏–Ω–∫–∞", request_location=True)],
        [KeyboardButton(text="üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
def calculate_distance(coord1, coord2):
    lat1, lon1 = coord1
    lat2, lon2 = coord2
    radius = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º

    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return radius * c

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
def get_route_info(start, end):
    coordinates_str = f"{start[0]},{start[1]}:{end[0]},{end[1]}"
    url = f"https://api.tomtom.com/routing/1/calculateRoute/{coordinates_str}/json?key={api_key}"

    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        route = data.get('routes', [])[0]
        length = route['summary']['lengthInMeters'] / 1000
        travel_time = math.ceil(route['summary']['travelTimeInSeconds'] / 60)
        return length, travel_time
    else:
        return None, None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
@dp.message(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def send_greeting(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã"
@dp.message(lambda message: message.text == "üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã")
async def send_work_message(message: types.Message):
    await bot.send_message(LENA_CHAT_ID, "–ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã, –≤—ã–µ–∑–∂–∞—é —á—É—Ç—å –ø–æ–∑–∂–µ üò´")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ, —á—Ç–æ —Ç—ã –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—à—å—Å—è, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üöô –ú–∞—à–∏–Ω–∫–∞" —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
@dp.message(lambda message: message.location)
async def track_location(message: types.Message):
    start_location = (message.location.latitude, message.location.longitude)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    length, travel_time = get_route_info(start_location, destination)

    if length and travel_time:
        arrival_time = (types.datetime.datetime.now() + types.timedelta(minutes=travel_time)).strftime("%H:%M")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –õ–µ–Ω–µ
        await bot.send_location(LENA_CHAT_ID, message.location.latitude, message.location.longitude)
        await bot.send_message(
            LENA_CHAT_ID,
            f"–ó–∞ —Ç–æ–±–æ–π –≤—ã–µ—Ö–∞–ª –º—É–∂, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–µ–±—è {length:.2f} –∫–º\n"
            f"–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ {travel_time} –º–∏–Ω—É—Ç\n"
            f"–ë—É–¥–µ—Ç —É —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {arrival_time}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–±–µ
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=keyboard)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
        await track_checkpoints(start_location)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
async def track_checkpoints(start_location):
    reached_points = set()

    while len(reached_points) < len(checkpoints):
        for i, checkpoint in enumerate(checkpoints):
            if i not in reached_points:
                current_distance = calculate_distance(start_location, checkpoint)
                if current_distance <= 0.1:  # –ï—Å–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 100 –º–µ—Ç—Ä–æ–≤
                    length, travel_time = get_route_info(checkpoint, destination)
                    arrival_time = (types.datetime.datetime.now() + types.timedelta(minutes=travel_time)).strftime("%H:%M")

                    message = f"–î–∏–º–∞ –ø—Ä–æ–µ—Ö–∞–ª {checkpoint_names[i]}, –±—É–¥–µ—Ç —É —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {travel_time} –º–∏–Ω—É—Ç –≤ {arrival_time}"
                    if i == len(checkpoints) - 1:
                        message = "–î–∏–º–∞ –ø–æ–¥—ä–µ—Ö–∞–ª, –∂–¥—ë—Ç —Ç–µ–±—è –≤–Ω–∏–∑—É."

                    await bot.send_message(LENA_CHAT_ID, message)
                    reached_points.add(i)

        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é 10 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
