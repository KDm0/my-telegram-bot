import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from geopy.distance import geodesic

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7446071433:AAF9DsFTKjQu7wuMj8iwKaDIK-Y5a89mQhk'

# –í–∞—à ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
USER_CHAT_ID = '5268373934'

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ)
destination_coords = (55.034281, 82.917169)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ä—Ç")],
        [KeyboardButton(text="üöô –ú–∞—à–∏–Ω–∫–∞")],
        [KeyboardButton(text="üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã")],
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
@dp.message(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
async def send_greeting(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üöô –ú–∞—à–∏–Ω–∫–∞"
@dp.message(lambda message: message.text == "üöô –ú–∞—à–∏–Ω–∫–∞")
async def send_car_message(message: types.Message):
    await bot.send_message(USER_CHAT_ID, "–Ø –ø–æ–µ—Ö–∞–ª üöó")
    await message.answer("–Ø –ø–æ–µ—Ö–∞–ª üöó", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã"
@dp.message(lambda message: message.text == "üò´ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã")
async def send_work_message(message: types.Message):
    await bot.send_message(USER_CHAT_ID, "–ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã, –≤—ã–µ–∑–∂–∞—é —á—É—Ç—å –ø–æ–∑–∂–µ üò´")
    await message.answer("–ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã, –≤—ã–µ–∑–∂–∞—é —á—É—Ç—å –ø–æ–∑–∂–µ üò´", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
@dp.message(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" and message.location)
async def send_location(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_coords = (message.location.latitude, message.location.longitude)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
    distance_km = geodesic(user_coords, destination_coords).km
    time_minutes = (distance_km / 20) * 60  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å 20 –∫–º/—á
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_coords}")
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {destination_coords}")
    print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km:.2f} –∫–º")
    print(f"–í—Ä–µ–º—è –≤ –ø—É—Ç–∏: {time_minutes:.2f} –º–∏–Ω—É—Ç")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–∞—Ä—Ç—É
    await bot.send_message(USER_CHAT_ID, f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {distance_km:.2f} –∫–º\n"
                                         f"–í—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–ø—Ä–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ 20 –∫–º/—á): {time_minutes:.2f} –º–∏–Ω—É—Ç")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã
    await bot.send_location(USER_CHAT_ID, latitude=message.location.latitude, longitude=message.location.longitude)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km:.2f} –∫–º. –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: {time_minutes:.2f} –º–∏–Ω—É—Ç.", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
